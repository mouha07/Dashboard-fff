import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from utils.data_processing import calculate_performance_metrics, calculate_trend_metrics, calculate_home_advantage

def show_insights(filtered_data, full_data):
    """
    Page insights avec tendances r√©centes et recommandations strat√©giques
    """
    st.title("üí° Insights & Recommandations Strat√©giques")
    
    # Calcul des p√©riodes pour comparaison
    current_year = datetime.now().year
    recent_data = full_data[full_data['year'] >= current_year - 2]  # 2 derni√®res ann√©es
    historical_data = full_data[full_data['year'] < current_year - 2]  # Donn√©es historiques
    
    # Tabs pour organiser les insights
    tab1, tab2, tab3 = st.tabs(["üìà Tendances R√©centes", "üéØ Projections & Objectifs", "üèÜ Recommandations FFF"])
    
    with tab1:
        st.markdown("### üìà Analyse des Tendances R√©centes")
        
        # Comparaison r√©cent vs historique
        col1, col2, col3 = st.columns(3)
        
        if len(recent_data) > 0 and len(historical_data) > 0:
            recent_metrics = calculate_performance_metrics(recent_data)
            historical_metrics = calculate_performance_metrics(historical_data)
            
            with col1:
                win_rate_trend = recent_metrics['win_rate'] - historical_metrics['win_rate']
                st.metric(
                    "üèÜ √âvolution Taux de Victoire",
                    f"{recent_metrics['win_rate']:.1f}%",
                    f"{win_rate_trend:+.1f}%"
                )
            
            with col2:
                goals_trend = recent_metrics['avg_goals_scored'] - historical_metrics['avg_goals_scored']
                st.metric(
                    "‚öΩ √âvolution Offensive",
                    f"{recent_metrics['avg_goals_scored']:.2f}",
                    f"{goals_trend:+.2f}"
                )
            
            with col3:
                defense_trend = historical_metrics['avg_goals_conceded'] - recent_metrics['avg_goals_conceded']
                st.metric(
                    "üõ°Ô∏è √âvolution D√©fensive",
                    f"{recent_metrics['avg_goals_conceded']:.2f}",
                    f"{defense_trend:+.2f}",
                    delta_color="inverse"
                )
        
        # Analyse du momentum avec graphique de tendance
        st.markdown("---")
        st.markdown("### üé≤ Analyse du Momentum")
        
        if len(filtered_data) >= 15:
            # Calcul du momentum avec moyennes mobiles
            trend_data = calculate_trend_metrics(filtered_data, window=8)
            
            fig_momentum = go.Figure()
            
            # Points par match (moyenne mobile)
            fig_momentum.add_trace(go.Scatter(
                x=trend_data['date'],
                y=trend_data['rolling_points'],
                mode='lines+markers',
                name='Performance (Points)',
                line=dict(color='#0055A4', width=3),
                hovertemplate='<b>%{y:.2f}</b> points<br>%{x}<extra></extra>'
            ))
            
            # Ligne de r√©f√©rence (performance moyenne)
            avg_performance = trend_data['points'].mean()
            fig_momentum.add_hline(
                y=avg_performance,
                line_dash="dash",
                line_color="gray",
                annotation_text=f"Moyenne: {avg_performance:.2f}"
            )
            
            # Zones de performance
            fig_momentum.add_hrect(
                y0=2.5, y1=3, fillcolor="green", opacity=0.1,
                annotation_text="Excellence", annotation_position="top left"
            )
            fig_momentum.add_hrect(
                y0=1.5, y1=2.5, fillcolor="yellow", opacity=0.1,
                annotation_text="Correct", annotation_position="top left"
            )
            fig_momentum.add_hrect(
                y0=0, y1=1.5, fillcolor="red", opacity=0.1,
                annotation_text="√Ä Am√©liorer", annotation_position="top left"
            )
            
            fig_momentum.update_layout(
                title="üéØ √âvolution du Momentum (Moyenne Mobile 8 Matchs)",
                xaxis_title="Date",
                yaxis_title="Points par Match (3=Victoire, 1=Nul, 0=D√©faite)",
                template="plotly_white",
                height=400
            )
            
            st.plotly_chart(fig_momentum, use_container_width=True)
            
            # Analyse des s√©ries
            st.markdown("#### üî• Analyse des S√©ries")
            
            # Calcul des s√©ries actuelles
            recent_matches = trend_data.sort_values('date').tail(10)
            current_streak = 0
            streak_type = "Unknown"
            
            if len(recent_matches) > 0:
                last_result = recent_matches.iloc[-1]['result']
                streak_type = last_result
                
                # Compter la s√©rie actuelle
                for i in range(len(recent_matches) - 1, -1, -1):
                    if recent_matches.iloc[i]['result'] == last_result:
                        current_streak += 1
                    else:
                        break
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if streak_type == "Victoire":
                    st.success(f"üî• **S√©rie de {current_streak} victoire(s)**")
                elif streak_type == "D√©faite":
                    st.error(f"‚ùå **S√©rie de {current_streak} d√©faite(s)**")
                else:
                    st.info(f"‚öñÔ∏è **S√©rie de {current_streak} nul(s)**")
            
            with col2:
                # Performance sur les 5 derniers matchs
                last_5 = recent_matches.tail(5)
                wins_5 = len(last_5[last_5['result'] == 'Victoire'])
                st.metric("üìä Forme R√©cente (5 matchs)", f"{wins_5}/5", f"{wins_5*20}%")
            
            with col3:
                # Tendance points
                if len(recent_matches) >= 5:
                    recent_avg = recent_matches.tail(5)['points'].mean()
                    previous_avg = recent_matches.head(5)['points'].mean() if len(recent_matches) >= 10 else recent_avg
                    trend = recent_avg - previous_avg
                    
                    if trend > 0.3:
                        st.success(f"üìà **Tendance Positive** (+{trend:.2f})")
                    elif trend < -0.3:
                        st.error(f"üìâ **Tendance N√©gative** ({trend:.2f})")
                    else:
                        st.info(f"‚û°Ô∏è **Tendance Stable** ({trend:+.2f})")
        
        else:
            st.warning("‚ö†Ô∏è Donn√©es insuffisantes pour l'analyse du momentum (minimum 15 matchs)")
        
        # Analyse saisonni√®re
        st.markdown("---")
        st.markdown("### üìÖ Patterns Temporels")
        
        if len(filtered_data) > 0:
            # Performance par mois
            monthly_performance = filtered_data.groupby('month').agg({
                'result': lambda x: (x == 'Victoire').sum() / len(x) * 100,
                'france_score': 'mean',
                'opponent_score': 'mean'
            }).reset_index()
            
            monthly_performance.columns = ['month', 'win_rate', 'goals_scored', 'goals_conceded']
            
            # Mapping des mois
            month_names = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Jun',
                          'Jul', 'Ao√ª', 'Sep', 'Oct', 'Nov', 'D√©c']
            monthly_performance['month_name'] = monthly_performance['month'].map(
                lambda x: month_names[x-1] if 1 <= x <= 12 else 'Unknown'
            )
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig_monthly = px.bar(
                    monthly_performance,
                    x='month_name',
                    y='win_rate',
                    title="Performance par Mois de l'Ann√©e",
                    labels={'win_rate': '% Victoires', 'month_name': 'Mois'},
                    color='win_rate',
                    color_continuous_scale='RdYlGn'
                )
                fig_monthly.update_layout(template="plotly_white", height=350)
                st.plotly_chart(fig_monthly, use_container_width=True)
            
            with col2:
                # Identification des meilleurs/pires mois
                best_month = monthly_performance.loc[monthly_performance['win_rate'].idxmax()]
                worst_month = monthly_performance.loc[monthly_performance['win_rate'].idxmin()]
                
                st.markdown("#### üìä Insights Saisonniers")
                st.success(f"üèÜ **Meilleur mois:** {best_month['month_name']} ({best_month['win_rate']:.1f}%)")
                st.error(f"‚ö†Ô∏è **Mois difficile:** {worst_month['month_name']} ({worst_month['win_rate']:.1f}%)")
                
                # Analyse contextuelle
                summer_months = monthly_performance[monthly_performance['month'].isin([6, 7, 8])]
                winter_months = monthly_performance[monthly_performance['month'].isin([12, 1, 2])]
                
                if len(summer_months) > 0 and len(winter_months) > 0:
                    summer_avg = summer_months['win_rate'].mean()
                    winter_avg = winter_months['win_rate'].mean()
                    
                    if summer_avg > winter_avg + 10:
                        st.info("‚òÄÔ∏è **Meilleures performances estivales**")
                    elif winter_avg > summer_avg + 10:
                        st.info("‚ùÑÔ∏è **Meilleures performances hivernales**")
    
    with tab2:
        st.markdown("### üéØ Projections et Objectifs")
        
        # D√©finition d'objectifs bas√©s sur les donn√©es
        if len(recent_data) > 0:
            current_performance = calculate_performance_metrics(recent_data)
            
            # Objectifs recommand√©s
            st.markdown("#### üéØ Objectifs Recommand√©s pour la Prochaine P√©riode")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("##### üìä Objectifs de Performance")
                
                current_win_rate = current_performance['win_rate']
                target_win_rate = min(current_win_rate + 5, 75)  # Am√©lioration progressive
                
                # Barre de progression pour le taux de victoire
                progress_win = current_win_rate / 100
                st.metric("Taux de Victoire Actuel", f"{current_win_rate:.1f}%")
                st.progress(progress_win)
                st.success(f"üéØ **Objectif:** {target_win_rate:.1f}% (+{target_win_rate - current_win_rate:.1f}%)")
                
                # Objectifs offensifs
                current_goals = current_performance['avg_goals_scored']
                target_goals = current_goals + 0.2  # Am√©lioration modeste
                
                st.metric("Buts/Match Actuel", f"{current_goals:.2f}")
                st.info(f"üéØ **Objectif:** {target_goals:.2f} buts/match")
                
                # Objectifs d√©fensifs
                current_conceded = current_performance['avg_goals_conceded']
                target_conceded = max(current_conceded - 0.1, 0.5)  # Am√©lioration d√©fensive
                
                st.metric("Buts Encaiss√©s/Match", f"{current_conceded:.2f}")
                st.warning(f"üéØ **Objectif:** {target_conceded:.2f} buts encaiss√©s/match")
            
            with col2:
                st.markdown("##### üìà Projections Bas√©es sur les Tendances")
                
                # Projection simple bas√©e sur la tendance r√©cente
                if len(recent_data) >= 10:
                    # Calcul de la tendance sur les matchs r√©cents
                    recent_sorted = recent_data.sort_values('date')
                    first_half = recent_sorted.head(len(recent_sorted)//2)
                    second_half = recent_sorted.tail(len(recent_sorted)//2)
                    
                    if len(first_half) > 0 and len(second_half) > 0:
                        trend_wins = (len(second_half[second_half['result'] == 'Victoire']) / len(second_half)) - \
                                   (len(first_half[first_half['result'] == 'Victoire']) / len(first_half))
                        
                        # Projection √† 12 mois
                        projected_win_rate = current_win_rate + (trend_wins * 100 * 2)  # Extrapolation
                        projected_win_rate = max(0, min(100, projected_win_rate))  # Bornes r√©alistes
                        
                        st.markdown("**üîÆ Projection 12 mois:**")
                        
                        if trend_wins > 0.1:
                            st.success(f"üìà Tendance positive: {projected_win_rate:.1f}% victoires projet√©es")
                        elif trend_wins < -0.1:
                            st.error(f"üìâ Tendance n√©gative: {projected_win_rate:.1f}% victoires projet√©es")
                        else:
                            st.info(f"‚û°Ô∏è Tendance stable: {projected_win_rate:.1f}% victoires projet√©es")
                        
                        # Graphique de projection
                        months = ['Actuel', 'Dans 3 mois', 'Dans 6 mois', 'Dans 12 mois']
                        projections = [
                            current_win_rate,
                            current_win_rate + (trend_wins * 100 * 0.5),
                            current_win_rate + (trend_wins * 100 * 1),
                            projected_win_rate
                        ]
                        
                        fig_projection = px.line(
                            x=months,
                            y=projections,
                            title="Projection Performance",
                            markers=True
                        )
                        fig_projection.add_hline(y=50, line_dash="dash", line_color="gray")
                        fig_projection.update_layout(
                            template="plotly_white",
                            height=250,
                            yaxis_title="% Victoires"
                        )
                        st.plotly_chart(fig_projection, use_container_width=True)
        
        # Benchmarking international
        st.markdown("---")
        st.markdown("### üåç Benchmarking International")
        
        # Simulation de standards internationaux (√† adapter avec de vraies donn√©es)
        international_standards = {
            'Top 5 Mondial': {'win_rate': 70, 'goals_per_match': 2.1, 'goals_conceded': 0.8},
            'Top 10 Mondial': {'win_rate': 60, 'goals_per_match': 1.8, 'goals_conceded': 1.1},
            'Top 20 Mondial': {'win_rate': 50, 'goals_per_match': 1.5, 'goals_conceded': 1.4}
        }
        
        current_metrics = calculate_performance_metrics(filtered_data)
        
        st.markdown("#### üìä Positionnement vs Standards Internationaux")
        
        # Graphique radar de comparaison
        categories = ['Taux de Victoire', 'Efficacit√© Offensive', 'Solidit√© D√©fensive']
        
        fig_radar = go.Figure()
        
        # Performance France (normalis√©e)
        france_values = [
            current_metrics.get('win_rate', 0),
            current_metrics.get('avg_goals_scored', 0) * 50,  # Normalisation
            (3 - current_metrics.get('avg_goals_conceded', 1)) * 33.33  # Inverse et normalisation
        ]
        
        fig_radar.add_trace(go.Scatterpolar(
            r=france_values,
            theta=categories,
            fill='toself',
            name='France Actuel',
            line_color='#0055A4'
        ))
        
        # Standards Top 10
        top10_values = [60, 90, 66.67]  # Valeurs normalis√©es
        fig_radar.add_trace(go.Scatterpolar(
            r=top10_values,
            theta=categories,
            fill='toself',
            name='Standard Top 10',
            line_color='#28a745',
            opacity=0.5
        ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=True,
            title="Comparaison vs Standards Internationaux",
            template="plotly_white"
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)
        
        # Gap analysis
        st.markdown("#### üìà Analyse des √âcarts")
        
        gaps = []
        current_win_rate = current_metrics.get('win_rate', 0)
        
        for level, standards in international_standards.items():
            win_gap = standards['win_rate'] - current_win_rate
            if win_gap > 0:
                gaps.append({
                    'Niveau': level,
                    '√âcart Victoires': f"+{win_gap:.1f}%",
                    'Matchs √† Gagner': f"{win_gap/100 * 20:.0f} sur 20",  # Sur une base de 20 matchs
                    'Priorit√©': 'üî¥ √âlev√©e' if win_gap > 20 else 'üü° Mod√©r√©e' if win_gap > 10 else 'üü¢ Faible'
                })
        
        if gaps:
            gap_df = pd.DataFrame(gaps)
            st.dataframe(gap_df, use_container_width=True, hide_index=True)
    
    with tab3:
        st.markdown("### üèÜ Recommandations Strat√©giques pour la FFF")
        
        # Analyse SWOT automatis√©e
        st.markdown("#### üìä Analyse SWOT Automatis√©e")
        
        current_metrics = calculate_performance_metrics(filtered_data)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("##### üí™ **FORCES**")
            forces = []
            
            if current_metrics.get('win_rate', 0) > 55:
                forces.append("‚úÖ Taux de victoire sup√©rieur √† 55%")
            
            if current_metrics.get('avg_goals_scored', 0) > 1.7:
                forces.append("‚úÖ Efficacit√© offensive (>1.7 buts/match)")
            
            if current_metrics.get('avg_goals_conceded', 0) < 1.2:
                forces.append("‚úÖ Solidit√© d√©fensive (<1.2 buts encaiss√©s/match)")
            
            home_adv = calculate_home_advantage(filtered_data) if len(filtered_data) > 0 else 0
            if home_adv > 10:
                forces.append("‚úÖ Fort avantage du terrain √† domicile")
            
            if current_metrics.get('clean_sheets', 0) / current_metrics.get('total_matches', 1) > 0.3:
                forces.append("‚úÖ R√©gularit√© d√©fensive (>30% clean sheets)")
            
            if not forces:
                forces.append("üîç Potentiel d'am√©lioration identifi√©")
            
            for force in forces:
                st.success(force)
            
            st.markdown("##### üöÄ **OPPORTUNIT√âS**")
            opportunities = [
                "üåü D√©veloppement des jeunes talents",
                "üìà Croissance de la visibilit√© du football f√©minin",
                "üèüÔ∏è Am√©lioration des infrastructures",
                "ü§ù Partenariats internationaux renforc√©s",
                "üì∫ Augmentation de l'audience m√©diatique"
            ]
            
            for opp in opportunities:
                st.info(opp)
        
        with col2:
            st.markdown("##### ‚ö†Ô∏è **FAIBLESSES**")
            weaknesses = []
            
            if current_metrics.get('win_rate', 0) < 45:
                weaknesses.append("‚ùå Taux de victoire insuffisant (<45%)")
            
            if current_metrics.get('avg_goals_scored', 0) < 1.3:
                weaknesses.append("‚ùå Manque d'efficacit√© offensive")
            
            if current_metrics.get('avg_goals_conceded', 0) > 1.5:
                weaknesses.append("‚ùå Vuln√©rabilit√© d√©fensive")
            
            if home_adv < 0:
                weaknesses.append("‚ùå Absence d'avantage domicile")
            
            if current_metrics.get('big_wins', 0) / current_metrics.get('total_matches', 1) < 0.1:
                weaknesses.append("‚ùå Peu de victoires convaincantes")
            
            if not weaknesses:
                weaknesses.append("‚ú® Aucune faiblesse majeure identifi√©e")
            
            for weakness in weaknesses:
                st.error(weakness)
            
            st.markdown("##### üö® **MENACES**")
            threats = [
                "üèÉ‚Äç‚ôÄÔ∏è Progression rapide des nations concurrentes",
                "üí∞ √âcarts de moyens avec certaines f√©d√©rations",
                "üè• Risques de blessures des joueuses cl√©s",
                "üìÖ Calendrier international charg√©",
                "üîÑ Rotation n√©cessaire entre clubs et s√©lection"
            ]
            
            for threat in threats:
                st.warning(threat)
        
        # Plan d'action strat√©gique
        st.markdown("---")
        st.markdown("#### üéØ Plan d'Action Strat√©gique 2024-2026")
        
        # Priorit√©s bas√©es sur l'analyse des donn√©es
        priorities = []
        
        if current_metrics.get('win_rate', 0) < 50:
            priorities.append({
                'priorit√©': 1,
                'domaine': 'Performance G√©n√©rale',
                'objectif': 'Atteindre 50% de victoires minimum',
                'actions': [
                    'Analyse vid√©o syst√©matique des d√©faites',
                    'Renforcement mental et coh√©sion groupe',
                    'Optimisation des sch√©mas tactiques'
                ]
            })
        
        if current_metrics.get('avg_goals_scored', 0) < 1.5:
            priorities.append({
                'priorit√©': 2,
                'domaine': 'Efficacit√© Offensive',
                'objectif': 'Am√©liorer la production offensive',
                'actions': [
                    'Travail sp√©cifique finition et derni√®re passe',
                    'D√©veloppement variantes tactiques offensives',
                    'Int√©gration nouveaux profils cr√©atifs'
                ]
            })
        
        if current_metrics.get('avg_goals_conceded', 0) > 1.3:
            priorities.append({
                'priorit√©': 3,
                'domaine': 'Solidit√© D√©fensive',
                'objectif': 'R√©duire les buts encaiss√©s',
                'actions': [
                    'Am√©lioration communication d√©fensive',
                    'Travail situations d\'arr√™t d√©fensives',
                    'Renforcement physique et duels'
                ]
            })
        
        if home_adv < 5:
            priorities.append({
                'priorit√©': 4,
                'domaine': 'Optimisation Domicile',
                'objectif': 'Cr√©er un v√©ritable avantage √† domicile',
                'actions': [
                    'Am√©lioration pr√©paration pr√©-match domicile',
                    'Gestion pression et attentes public',
                    'Optimisation logistique et confort'
                ]
            })
        
        # Affichage du plan d'action
        for i, priority in enumerate(priorities[:3]):  # Max 3 priorit√©s
            with st.expander(f"üéØ **Priorit√© {priority['priorit√©']}: {priority['domaine']}**"):
                st.markdown(f"**Objectif:** {priority['objectif']}")
                st.markdown("**Actions concr√®tes:**")
                for action in priority['actions']:
                    st.markdown(f"‚Ä¢ {action}")
                
                # Timeline sugg√©r√©e
                st.markdown("**Timeline sugg√©r√©e:** 6-12 mois")
                
                # Indicateurs de suivi
                if priority['domaine'] == 'Performance G√©n√©rale':
                    st.markdown("**Indicateurs:** Taux de victoire, points par match")
                elif priority['domaine'] == 'Efficacit√© Offensive':
                    st.markdown("**Indicateurs:** Buts/match, occasions cr√©√©es, conversion")
                elif priority['domaine'] == 'Solidit√© D√©fensive':
                    st.markdown("**Indicateurs:** Buts encaiss√©s/match, clean sheets")
                elif priority['domaine'] == 'Optimisation Domicile':
                    st.markdown("**Indicateurs:** % victoires domicile vs ext√©rieur")
        
        # Investissements recommand√©s
        st.markdown("---")
        st.markdown("#### üí∞ Investissements Recommand√©s")
        
        investment_areas = [
            {
                'domaine': 'üë• Formation et D√©tection',
                'budget': '√âlev√©',
                'impact': 'Long terme',
                'description': 'Renforcement centres de formation, d√©tection pr√©coce talents'
            },
            {
                'domaine': 'üß† Staff Technique',
                'budget': 'Mod√©r√©',
                'impact': 'Court terme',
                'description': 'Sp√©cialistes analyse vid√©o, pr√©parateurs mentaux, nutritionnistes'
            },
            {
                'domaine': 'üè• M√©dical et Performance',
                'budget': 'Mod√©r√©',
                'impact': 'Moyen terme',
                'description': 'Pr√©vention blessures, optimisation r√©cup√©ration, suivi physique'
            },
            {
                'domaine': 'üèüÔ∏è Infrastructures',
                'budget': '√âlev√©',
                'impact': 'Long terme',
                'description': 'Centres d\'entra√Ænement d√©di√©s, terrains de qualit√©'
            }
        ]
        
        for investment in investment_areas:
            with st.expander(f"{investment['domaine']} - Budget: {investment['budget']}"):
                st.markdown(f"**Impact attendu:** {investment['impact']}")
                st.markdown(f"**Description:** {investment['description']}")
                
                # ROI estim√©
                if investment['budget'] == '√âlev√©':
                    st.info("üí° ROI √©lev√© sur le long terme, investissement structurel")
                else:
                    st.success("üí° ROI rapide, am√©lioration performance imm√©diate")
        
        # Conclusion et vision
        st.markdown("---")
        st.markdown("### üöÄ Vision Strat√©gique 2026")
        
        st.markdown(f"""
        Bas√© sur l'analyse des {len(filtered_data)} matchs de la p√©riode s√©lectionn√©e, 
        voici la feuille de route recommand√©e pour l'√©quipe de France f√©minine :
        
        **üéØ Objectifs 2026:**
        - ‚úÖ Atteindre le Top 8 mondial de fa√ßon stable
        - ‚úÖ 60% de taux de victoire minimum
        - ‚úÖ Qualification syst√©matique aux phases finales des grandes comp√©titions
        
        **üèÜ Ambitions Competition:**
        - ü•á Podium Euro 2025
        - üåç Quart de finale Coupe du Monde 2027 minimum
        - üèÖ M√©daille Jeux Olympiques 2028
        
        **üí™ Piliers du Succ√®s:**
        1. **Excellence technique** - Formation continue et innovation tactique
        2. **Mentalit√© de gagnante** - Culture de la performance et r√©silience
        3. **Professionnalisation** - Structures et moyens de niveau mondial
        4. **Identit√© de jeu** - Style reconnaissable et efficace
        """)
        
        # Call to action
        st.success("""
        üéØ **La France a tous les atouts pour rejoindre l'√©lite mondiale du football f√©minin. 
        Les donn√©es montrent un potentiel inexploit√© qui ne demande qu'√† √™tre r√©v√©l√© par 
        une approche structur√©e et des investissements cibl√©s.**
        """)
    
    # Sidebar avec donn√©es contextuelles
    with st.sidebar:
        st.markdown("---")
        st.markdown("### üìä Donn√©es de Contexte")
        
        if len(filtered_data) > 0:
            st.markdown(f"""
            **P√©riode analys√©e:**
            {filtered_data['date'].min().strftime('%d/%m/%Y')} - {filtered_data['date'].max().strftime('%d/%m/%Y')}
            
            **Donn√©es r√©centes (2 ans):**
            {len(recent_data)} matchs
            
            **Base historique:**
            {len(historical_data)} matchs
            
            **Derni√®re mise √† jour:**
            {datetime.now().strftime('%d/%m/%Y %H:%M')}
            """)
